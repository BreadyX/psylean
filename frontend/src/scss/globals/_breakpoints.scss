@use 'sass:string';
@use 'sass:list';
@use 'sass:map';

$breakpoints: (
  'phone': 420px,
  'tablet': 767px
);

$operators: (
  '<': 'max-',
  '>': 'min-'
);

$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x':
    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x':
    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;

@function parse-feature($op, $var, $is-width) {
  $feature: '(' + map.get($operators, $op);
  @if $is-width == true {
    $feature: $feature + 'width:';
  } @else {
    $feature: $feature + 'height:';
  }

  $val: null;
  @if string.slice($var, 1, 1) == '=' {
    $val: get-break-val(string.slice($var, 2, -1));
  } @else {
    @if is-break-val($var) {
      $val: map.get($breakpoints, $var);
      @if $op == '<' {
        $val: $val - 1px;
      } @else if $op == '>' {
        $val: $val + 1px;
      }
    } @else {
      $val: $var;
    }
  }
  @return $feature + ' ' + $val + ')';
}

@function concat-query($old, $add) {
  $q: null;
  @if $old != '' {
    $q: $old + ' and ' + $add;
  } @else {
    $q: $add;
  }
  @return $q;
}

@function is-break-val($var) {
  $val: map.get($breakpoints, $var);
  @return $val != null;
}

@mixin media($feats...) {
  $query: '';

  @each $f in $feats {
    $op: string.slice($f, 1, 1);
    $feature: null;

    @if list.index(map.keys($operators), $op) != null {
      $var: string.slice($f, 2, -1);
      $feature: parse-feature($op, $var, true);
    } @else if $op == '|' {
      $op: string.slice($f, 2, 2);
      @if list.index(map.keys($operators), $op) == null {
        @error 'Invalid operator ' + $op;
      }
      $var: string.slice($f, 3, -1);
      $feature: parse-feature($op, $var, false);
    } @else {
      $exp: map.get($media-expressions, $f);
      @if $exp == null {
        @error 'Invalid media expression ' + $f;
      }
      $feature: $exp;
    }

    $query: concat-query($query, $feature);
  }

  @media #{$query} {
    @content;
  }
}
